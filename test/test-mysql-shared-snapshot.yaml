apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: test-shared-snapshot-mysql
  namespace: default
spec:
  serviceName: "mysql"
  replicas: 1
  selector:
    matchLabels:
      app: test-shared-snapshot-mysql
  template:
    metadata:
      labels:
        app: test-shared-snapshot-mysql
    spec:
      containers:
      - name: mysql
        image: business.tecorigin.io:5443/kubeflow/docker.io/library/mysql:8.0.29
        env:
        - name: MYSQL_ALLOW_EMPTY_PASSWORD
          value: "true"
        lifecycle:
          postStart:
            exec:
              command:
                - "/bin/sh"
                - "/scripts/post_start_hook.sh"
        # Adding a simple command to ensure it writes some data and keeps running
        # MySQL will initialize its data directory on first start.
        # We'll also write a test file to a common location.
        command:
          - "/bin/sh"
          - "-c"
          - |
            echo "Test file in shared upperdir" > /tmp/my_test_file.txt
            datadir="$(mysqld --verbose --help 2>/dev/null | awk '$1 == "datadir" { print $2 }')"
            echo "MySQL data directory will be: ${datadir}"
            # Ensure the entrypoint script is executable if it isn't already
            chmod +x /usr/local/bin/docker-entrypoint.sh
            # Start MySQL in the background to allow it to initialize
            echo "Starting MySQL in background..."
            /usr/local/bin/docker-entrypoint.sh mysqld & mysqld_pid=$!
            echo "Waiting for MySQL to initialize (approx 30 seconds)..."
            sleep 30
            # Create a marker file after MySQL has had some time to initialize its directory
            if [ -d "${datadir}" ]; then
              echo "Creating marker file in ${datadir}/containerd_test_marker.txt"
              echo "This is a test marker file." > "${datadir}/containerd_test_marker.txt"
            else
              echo "MySQL data directory ${datadir} not found after startup."
            fi
            echo "MySQL started. Container will sleep for 10 minutes for inspection."
            echo "To stop, manually delete the pod or exec into it and kill PID $mysqld_pid or this script (PID $$)."
            # Keep the container running by waiting on the backgrounded MySQL process
            # If mysqld exits, this script will also exit.
            # Alternatively, a long sleep can be used if direct process waiting is problematic.
            # wait $mysqld_pid 
            # Using sleep as a simpler way to keep alive for inspection for a fixed time
            sleep 900 
            echo "Stopping MySQL..."
            kill $mysqld_pid
            wait $mysqld_pid 2>/dev/null || true
            echo "Exiting test script."
        # It's good practice to define resource requests/limits
        resources:
          limits:
            memory: "512Mi"
            cpu: "500m"
          requests:
            memory: "256Mi"
            cpu: "250m"
        volumeMounts:
        - name: shared-storage
          mountPath: /nvme1
        - name: scripts
          mountPath: /scripts
          readOnly: true
      volumes:
      - name: shared-storage
        hostPath:
          path: /nvme1
          type: Directory
      - name: scripts
        hostPath:
          path: /nvme1
          type: Directory 